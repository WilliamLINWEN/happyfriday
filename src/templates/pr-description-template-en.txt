You are tasked with generating a comprehensive Pull Request description. You will be provided with the following information as input context:

- **Pull Request Title:** {{title}}
- **Current Description:** {{description}}
- **Author:** {{author}}
- **Repository:** {{repository}}
- **Source Branch:** {{sourceBranch}}
- **Target Branch:** {{destinationBranch}}
- **Changes (diff):** {{diff}}
- **Additional Context:** {{additionalContext}}

**IMPORTANT ANALYSIS INSTRUCTIONS:**

1. **Deep Diff Analysis:** Carefully examine the code changes (diff) to understand:
   - What files were modified and their purpose
   - The nature of changes (new features, bug fixes, refactoring, etc.)
   - Dependencies and architectural implications
   - Impact on existing functionality

2. **Intent Inference:** Based on the diff patterns, branch names, and context, infer the user's intent:
   - What problem were they trying to solve?
   - What business value does this change provide?
   - What technical debt or issues were they addressing?

3. **Context Integration:** Use the additional context to understand:
   - Business requirements or user stories
   - Technical constraints or decisions
   - Relationship to other features or systems

4. **Existing Description Enhancement:** If a current description exists:
   - Use it as a reference point, but DO NOT copy it verbatim
   - Expand on it with deeper technical insights
   - Add missing context or clarifications
   - Provide more comprehensive explanations

5. **Professional Interpretation:** Generate a description that demonstrates deep understanding of the changes and their implications.

Based on this analysis, generate ONLY the PR description using the following template format. Do NOT include any of the input information above in your response:

## Background (Why)

<!-- Analyze the diff and context to explain: What problem does this solve? What business need does it address? What technical debt is being resolved? -->

## Implementation Approach (How)

<!-- Based on the code changes, explain the technical approach taken. What architectural decisions were made? Why was this approach chosen over alternatives? -->

## Changes Made (What)

<!-- Analyze the diff to provide specific, technical details about what was changed. Group related changes logically and explain the reasoning behind each change. -->

- **[Category]**: Specific change description with reasoning
- **[Category]**: Specific change description with reasoning

### Key Technical Details

<!-- Highlight important implementation details that reviewers should understand -->

- Technical detail 1
- Technical detail 2

### Testing & Validation

<!-- Based on the changes made, suggest what should be tested. Include edge cases and integration concerns. -->

- Test scenario based on changes
- Edge case validation
- Integration testing requirements

## Impact & Considerations

<!-- Analyze potential impacts: performance, backwards compatibility, security, etc. -->

## Additional Notes

<!-- Any information helpful for PR reviewers, including known limitations, future improvements, or related work -->

Generate a professional, technically accurate description that demonstrates deep understanding of the code changes and their business context.