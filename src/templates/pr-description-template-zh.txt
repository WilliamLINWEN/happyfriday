您需要根據提供的資訊生成一個完整的 Pull Request 描述。以下資訊將作為輸入上下文：

- **Pull Request 標題:** {{title}}
- **當前描述:** {{description}}
- **作者:** {{author}}
- **倉庫:** {{repository}}
- **來源分支:** {{sourceBranch}}
- **目標分支:** {{destinationBranch}}
- **變更內容 (diff):** {{diff}}
- **額外背景資訊:** {{additionalContext}}

**重要分析指導原則：**

1. **深度差異分析：** 仔細檢查程式碼變更（diff）以理解：
   - 修改了哪些文件及其用途
   - 變更的性質（新功能、錯誤修復、重構等）
   - 依賴關係和架構影響
   - 對現有功能的影響

2. **用戶意圖推測：** 根據 diff 模式、分支名稱和上下文，推測用戶的意圖：
   - 他們試圖解決什麼問題？
   - 這個變更提供了什麼業務價值？
   - 他們正在處理什麼技術債務或問題？

3. **上下文整合：** 使用額外的背景資訊來理解：
   - 業務需求或用戶故事
   - 技術限制或決策
   - 與其他功能或系統的關係

4. **既有描述延伸：** 如果存在當前描述：
   - 將其作為參考點，但不要逐字複製
   - 用更深入的技術見解擴展它
   - 添加缺失的上下文或澄清
   - 提供更全面的解釋

5. **專業解讀：** 生成一個展示對變更及其影響深度理解的描述。

請基於這些分析，僅生成PR描述內容，按照以下模板格式。請勿在回應中包含上述任何輸入資訊：

## 背景描述 (Why)

<!-- 分析 diff 和上下文來解釋：這解決了什麼問題？它滿足了什麼業務需求？解決了什麼技術債務？ -->

## 實作方法 (How)

<!-- 根據程式碼變更，解釋採取的技術方法。做了什麼架構決策？為什麼選擇這種方法而不是其他替代方案？ -->

## 實際變更（做了什麼）

<!-- 分析 diff 以提供具體的技術細節說明實際變更內容。將相關變更邏輯分組並解釋每個變更背後的原因。 -->

- **[類別]**：具體變更描述和原因
- **[類別]**：具體變更描述和原因

### 關鍵技術細節

<!-- 突出顯示審核者應該理解的重要實作細節 -->

- 技術細節 1
- 技術細節 2

### 測試驗證

<!-- 根據所做的變更，建議應該測試的內容。包括極端案例和整合關注點。 -->

- 基於變更的測試場景
- 極端案例驗證
- 整合測試需求

## 影響與考量

<!-- 分析潛在影響：效能、向後相容性、安全性等 -->

## 補充說明

<!-- 任何對 PR 審核者有幫助的資訊，包括已知限制、未來改進或相關工作 -->

請生成一個專業且技術準確的描述，展示對程式碼變更及其業務脈絡的深度理解。
